{
	"info": {
		"_postman_id": "propmatch-api-collection-v2.1",
		"name": "PropMatch API Collection v2.1 - Optimized Search",
		"description": "**PropMatch Property Search API - Complete Collection v2.1**\n\nüöÄ **Updated for Optimized Search with Precise Percentage Scoring**\n\nPropMatch is an AI-powered property search platform that delivers precise property matches using advanced vector search and intelligent scoring.\n\n## ‚ö° New Features in v2.1\n- **True Percentage Scores**: Realistic 0-100% match scores (85.3%, 92.7%, etc.)\n- **Unique Decimal Precision**: No duplicate scores, every property gets unique rating\n- **Optimized Performance**: Faster search with simplified scoring algorithms\n- **High Scores for Good Matches**: Perfect matches can score 95-100%+\n- **Objective Low Scores**: Poor matches get realistic low scores (20-30%)\n\n## üéØ Scoring System Explained\n- **Base Score**: Vector similarity (60-90%)\n- **Bedroom Match**: +25% for exact match\n- **Property Type**: +20% for type match\n- **Price Range**: +15% for budget compliance\n- **Location**: +15% for area match\n- **Features**: +2% per matching feature\n- **Final Range**: 15-100%+ (capped at 100%)\n\n## üîç Natural Language Examples\n- \"3 bedroom house with garden\" ‚Üí 83-87% scores\n- \"luxury apartment in Clifton\" ‚Üí 95-100% scores\n- \"castle with moat\" ‚Üí 26-28% scores (realistic low)\n\n## Base URL\n`http://localhost:8000`",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "üü¢ Health & Status Checks",
			"description": "Verify all services are running and healthy",
			"item": [
				{
					"name": "API Health Check",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/",
							"host": ["{{base_url}}"],
							"path": [""]
						},
						"description": "**Basic API Health Check**\n\n‚úÖ Verifies PropMatch API server is running\n\n**Expected Response:**\n```json\n{\n  \"message\": \"PropMatch API is running!\",\n  \"version\": \"1.0.0\",\n  \"docs\": \"/docs\"\n}\n```\n\n**Use Case:** Quick server availability check"
					},
					"response": []
				},
				{
					"name": "Search Service Health (Detailed)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/search/health",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", "health"]
						},
						"description": "**Comprehensive Search Service Health Check**\n\nüîç Validates all AI search components:\n- ‚úÖ Vector search (Pinecone) connectivity\n- ‚úÖ Supabase database connection\n- ‚úÖ OpenAI API availability\n- ‚úÖ Index statistics (1,437 properties)\n\n**Expected Response:**\n```json\n{\n  \"vector_search\": {\n    \"available\": true,\n    \"index_stats\": {\n      \"total_vectors\": 1437,\n      \"dimension\": 1536\n    }\n  },\n  \"supabase_connection\": {\"available\": true},\n  \"enhanced_search\": {\"available\": true}\n}\n```\n\n**Critical for:** Verifying AI search before testing"
					},
					"response": []
				}
			]
		},
		{
			"name": "üè† Property Data Access",
			"description": "Browse and retrieve property information",
			"item": [
				{
					"name": "Browse Properties (Paginated)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/properties/?skip=0&limit=5",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "properties", ""],
							"query": [
								{
									"key": "skip",
									"value": "0",
									"description": "Pagination offset"
								},
								{
									"key": "limit",
									"value": "5",
									"description": "Number of properties to return"
								}
							]
						},
						"description": "**Browse All Properties with Pagination**\n\nüìã Get paginated list of all available properties\n\n**Query Parameters:**\n- `skip`: Offset for pagination (default: 0)\n- `limit`: Number of properties (max: 100, default: 20)\n\n**Response Data:**\n- Complete property details\n- High-resolution images\n- Features and amenities\n- Points of interest with distances\n- Property specifications\n\n**Use Case:** Property browsing without search filters"
					},
					"response": []
				},
				{
					"name": "Filter Properties (Traditional)",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/properties/?property_type=apartment&min_price=1000000&max_price=3000000&bedrooms=2&limit=8",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "properties", ""],
							"query": [
								{
									"key": "property_type",
									"value": "apartment",
									"description": "apartment, house, townhouse"
								},
								{
									"key": "min_price",
									"value": "1000000",
									"description": "Minimum price in ZAR"
								},
								{
									"key": "max_price",
									"value": "3000000",
									"description": "Maximum price in ZAR"
								},
								{
									"key": "bedrooms",
									"value": "2",
									"description": "Number of bedrooms"
								},
								{
									"key": "limit",
									"value": "8"
								}
							]
						},
						"description": "**Traditional Property Filtering**\n\nüîß Filter properties using dropdown-style parameters\n\n**Available Filters:**\n- `property_type`: apartment, house, townhouse\n- `min_price`/`max_price`: Price range in ZAR\n- `bedrooms`: Number of bedrooms\n- `city`: Filter by city\n- `suburb`: Filter by neighborhood\n\n**Use Case:** When users prefer structured filters over natural language"
					},
					"response": []
				},
				{
					"name": "Get Single Property Details",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/properties/116045887",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "properties", "116045887"]
						},
						"description": "**Individual Property Details**\n\nüè† Get complete details for a specific property\n\n**Path Parameter:**\n- `property_id`: Property listing number (e.g., 116045887)\n\n**Complete Data Includes:**\n- Full property description\n- All images and virtual tours\n- Detailed features and amenities\n- Exact location information\n- Points of interest with distances\n- Property specifications (floor size, erf size)\n- Rates and taxes information\n\n**Use Case:** Property detail page after search selection"
					},
					"response": []
				},
				{
					"name": "Database Statistics",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/properties/stats/summary",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "properties", "stats", "summary"]
						},
						"description": "**Property Database Statistics**\n\nüìä Overview of property database contents\n\n**Statistics Include:**\n- Total properties (1,438)\n- Properties for sale vs. rent\n- Property type distribution\n- Price range (min: R320k, max: R180M, avg: R5.1M)\n- Top cities by property count\n\n**Expected Response:**\n```json\n{\n  \"total_properties\": 1438,\n  \"for_sale\": 1000,\n  \"property_types\": [\n    {\"type\": \"house\", \"count\": 450},\n    {\"type\": \"apartment\", \"count\": 549}\n  ],\n  \"price_range\": {\n    \"min\": 320000,\n    \"max\": 180000000,\n    \"average\": 5067399\n  }\n}\n```\n\n**Use Case:** Dashboard widgets and market analysis"
					},
					"response": []
				}
			]
		},
		{
			"name": "ü§ñ AI-Powered Search (Main Feature)",
			"description": "Natural language property search with precise scoring",
			"item": [
				{
					"name": "üöÄ Perfect Match Example",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"3 bedroom house with garden\",\n    \"limit\": 5\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/search/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", ""]
						},
						"description": "**Perfect Match Example - High Scores Expected**\n\nüéØ **Expected Scores: 83-87%**\n\nThis query should find excellent matches because:\n- ‚úÖ \"3 bedroom\" = +25% bonus for exact bedroom match\n- ‚úÖ \"house\" = +20% bonus for property type match\n- ‚úÖ \"garden\" = +2% bonus for feature match\n- ‚úÖ Strong vector similarity for common request\n\n**Query Analysis:**\n- **Bedrooms**: 3 (extracted automatically)\n- **Property Type**: House (intelligent recognition)\n- **Features**: Garden (feature matching)\n\n**Expected Results:**\n- Properties with exactly 3 bedrooms\n- Houses (not apartments)\n- Properties with gardens/outdoor space\n- Scores in 80-90% range for good matches\n\n**Test Goal:** Verify high scores for good matches"
					},
					"response": []
				},
				{
					"name": "üèÜ Luxury Property Search",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"luxury apartment with sea view in Clifton\",\n    \"limit\": 3\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/search/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", ""]
						},
						"description": "**Luxury Property Search - Expect 95-100%+ Scores**\n\nüèÜ **Expected Scores: 95-100%+**\n\nThis should get the highest scores because:\n- ‚úÖ \"apartment\" = +20% type bonus\n- ‚úÖ \"Clifton\" = +15% location bonus (premium area)\n- ‚úÖ \"view\" = +2% feature bonus\n- ‚úÖ High vector similarity for luxury properties\n- ‚úÖ Premium properties match luxury context\n\n**Query Analysis:**\n- **Property Type**: Apartment\n- **Location**: Clifton (premium Atlantic Seaboard)\n- **Features**: Sea view\n- **Context**: Luxury (high-end properties)\n\n**Expected Results:**\n- Expensive apartments in Clifton\n- Properties with sea/ocean views\n- High-end finishes and amenities\n- Scores approaching or exceeding 100%\n\n**Test Goal:** Verify perfect matches get highest scores"
					},
					"response": []
				},
				{
					"name": "üí∞ Budget-Conscious Search",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"2 bedroom apartment under 2 million rand\",\n    \"limit\": 8\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/search/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", ""]
						},
						"description": "**Budget-Conscious Search with Price Filter**\n\nüí∞ **Expected Scores: 75-90%** (depending on price compliance)\n\n**Automatic Filter Extraction:**\n- ‚úÖ \"2 bedroom\" ‚Üí bedrooms = 2 (+25% bonus)\n- ‚úÖ \"apartment\" ‚Üí type = apartment (+20% bonus)\n- ‚úÖ \"under 2 million\" ‚Üí max_price = 2,000,000 (+15% bonus)\n\n**AI Intelligence:**\n- Understands \"under 2 million rand\" as price constraint\n- Converts to R2,000,000 automatically\n- Prioritizes properties within budget\n- Penalizes overpriced properties\n\n**Expected Results:**\n- 2-bedroom apartments only\n- All properties under R2,000,000\n- Higher scores for properties well under budget\n- Properties close to R2M may score lower\n\n**Test Goal:** Verify price filter extraction and application"
					},
					"response": []
				},
				{
					"name": "üè´ Family-Oriented Search",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"family home near good schools in southern suburbs\",\n    \"limit\": 6\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/search/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", ""]
						},
						"description": "**Family-Oriented Search - Context Understanding**\n\nüè´ **Expected Scores: 70-85%**\n\n**AI Context Understanding:**\n- \"family home\" = house preference (not apartment)\n- \"good schools\" = proximity to education facilities\n- \"southern suburbs\" = specific Cape Town area\n\n**Scoring Factors:**\n- ‚úÖ Houses score higher than apartments\n- ‚úÖ \"southern suburbs\" location bonus (+15%)\n- ‚úÖ Properties with school POIs get higher scores\n- ‚úÖ Family-suitable sizes (3+ bedrooms)\n\n**Expected Areas:**\n- Newlands, Claremont, Rondebosch\n- Wynberg, Plumstead, Constantia\n- Areas known for good schools\n\n**Test Goal:** Verify contextual understanding and location scoring"
					},
					"response": []
				},
				{
					"name": "üöó Feature-Specific Search",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"property with pool, garage, and security\",\n    \"limit\": 5\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/search/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", ""]
						},
						"description": "**Feature-Specific Search - Multiple Amenities**\n\nüöó **Expected Scores: 65-80%** (varies by feature matches)\n\n**Feature Matching:**\n- ‚úÖ \"pool\" = +2% per property with pool\n- ‚úÖ \"garage\" = +2% per property with garage/parking\n- ‚úÖ \"security\" = +2% per property with security features\n- üéØ Perfect match = +6% total feature bonus\n\n**AI Feature Recognition:**\n- Matches against property.features array\n- Flexible matching (\"pool\" matches \"swimming pool\")\n- Cumulative scoring for multiple features\n\n**Expected Results:**\n- Properties with swimming pools\n- Properties with garages or covered parking\n- Secure complexes or gated communities\n- Higher scores for properties with all 3 features\n\n**Test Goal:** Verify feature detection and cumulative scoring"
					},
					"response": []
				},
				{
					"name": "‚ùå Impossible Query (Low Scores)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"castle with moat and drawbridge\",\n    \"limit\": 3\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/search/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", ""]
						},
						"description": "**Impossible Query - Testing Objective Low Scores**\n\n‚ùå **Expected Scores: 20-30%** (realistic low scores)\n\n**Purpose of This Test:**\n- Verify AI doesn't artificially inflate scores\n- Confirm objective scoring for impossible requests\n- Test that poor matches get appropriately low scores\n\n**Why Scores Should Be Low:**\n- No properties match \"castle\"\n- No \"moat\" or \"drawbridge\" features exist\n- Vector similarity will be very low\n- No bonus points can be awarded\n\n**Expected Behavior:**\n- Returns some properties (vector search finds closest matches)\n- All scores in 20-35% range\n- Properties returned are random houses/apartments\n- No artificial score boosting\n\n**Test Goal:** Verify realistic low scores for poor matches"
					},
					"response": []
				},
				{
					"name": "üìç Location-Specific Search",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"apartment in Newlands or Rondebosch near UCT\",\n    \"limit\": 8\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/search/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", ""]
						},
						"description": "**Location-Specific Search - Multiple Areas**\n\nüìç **Expected Scores: 70-85%**\n\n**Location Intelligence:**\n- ‚úÖ \"Newlands\" and \"Rondebosch\" = +15% location bonus\n- ‚úÖ \"apartment\" = +20% type bonus\n- ‚úÖ \"near UCT\" = proximity scoring boost\n- ‚úÖ University areas = good POI coverage\n\n**AI Understanding:**\n- Recognizes multiple location options\n- Understands UCT (University of Cape Town) context\n- Prioritizes properties in specified neighborhoods\n- Applies proximity scoring for university area\n\n**Expected Results:**\n- Apartments in Newlands and Rondebosch primarily\n- Properties close to UCT campus\n- Student-friendly areas\n- Good transport links to university\n\n**Test Goal:** Verify multi-location recognition and proximity scoring"
					},
					"response": []
				}
			]
		},
		{
			"name": "üî¨ Testing & Debug Tools",
			"description": "Tools for testing and debugging search functionality",
			"item": [
				{
					"name": "Simple Search (Quick Test)",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"modern apartment with parking\",\n    \"limit\": 5,\n    \"use_ai\": true\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/search/simple",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", "simple"]
						},
						"description": "**Simple Search - Quick Testing Format**\n\nüî¨ Simplified endpoint for rapid testing\n\n**Features:**\n- Lighter response format\n- Essential property info only\n- Quick debugging\n- Same AI search power\n\n**Response Format:**\n```json\n{\n  \"query\": \"modern apartment with parking\",\n  \"found\": 15,\n  \"ai_powered\": true,\n  \"properties\": [\n    {\n      \"id\": \"116045887\",\n      \"title\": \"Modern Apartment...\",\n      \"price\": 2500000,\n      \"location\": \"Clifton, Cape Town\",\n      \"searchScore\": 87.3,\n      \"url\": \"https://...\"\n    }\n  ]\n}\n```\n\n**Use Case:** Quick integration testing and debugging"
					},
					"response": []
				},
				{
					"name": "Vector Search Debug",
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{base_url}}/api/v1/search/test-vector?query=luxury house with view&limit=3",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", "test-vector"],
							"query": [
								{
									"key": "query",
									"value": "luxury house with view",
									"description": "Test query"
								},
								{
									"key": "limit",
									"value": "3",
									"description": "Number of results"
								}
							]
						},
						"description": "**Vector Search Debug - Raw Similarity Scores**\n\nüîç Debug endpoint showing raw vector search mechanics\n\n**Debug Information:**\n- Raw vector similarity scores (0.6-0.9 range)\n- Property metadata from vector database\n- Index statistics and health\n- Detailed scoring breakdown\n\n**Response Example:**\n```json\n{\n  \"status\": \"success\",\n  \"query\": \"luxury house with view\",\n  \"results\": [\n    {\n      \"property_id\": \"116045887\",\n      \"vector_score\": 0.8234,\n      \"metadata\": {\n        \"property_type\": \"house\",\n        \"price\": 15000000,\n        \"bedrooms\": 4,\n        \"city\": \"Cape Town\"\n      }\n    }\n  ],\n  \"index_stats\": {\n    \"total_vectors\": 1437,\n    \"dimension\": 1536\n  }\n}\n```\n\n**Use Case:** Understanding vector search behavior and debugging similarity scoring"
					},
					"response": []
				}
			]
		},
		{
			"name": "üìä Scoring System Tests",
			"description": "Test specific aspects of the new scoring system",
			"item": [
				{
					"name": "üéØ Bedroom Matching Test",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"4 bedroom house\",\n    \"limit\": 5\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/search/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", ""]
						},
						"description": "**Bedroom Matching Test - +25% Bonus Verification**\n\nüéØ **Test Goal:** Verify exact bedroom matches get +25% bonus\n\n**Expected Behavior:**\n- Properties with exactly 4 bedrooms should score highest\n- Properties with 3 or 5 bedrooms should score +15% (close match)\n- Properties with 2 or 6 bedrooms should score +6% (somewhat close)\n- Properties with 1 or 7+ bedrooms get no bedroom bonus\n\n**Score Expectations:**\n- 4-bedroom properties: 80-90%+\n- 3/5-bedroom properties: 75-85%\n- Other bedroom counts: 65-75%\n\n**Verification Steps:**\n1. Check all top results have 4 bedrooms\n2. Verify scores decrease for non-exact matches\n3. Confirm scoring follows proximity pattern"
					},
					"response": []
				},
				{
					"name": "üè† Property Type Precision",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"apartment with balcony\",\n    \"limit\": 6\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/search/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", ""]
						},
						"description": "**Property Type Precision Test - +20% Bonus**\n\nüè† **Test Goal:** Verify property type matching accuracy\n\n**Expected Behavior:**\n- All results should be apartments (not houses)\n- Apartments should get +20% type bonus\n- \"balcony\" should provide +2% feature bonus\n- Combined bonuses should yield high scores\n\n**Score Expectations:**\n- Apartments with balconies: 85-95%\n- Apartments without balconies: 80-90%\n- Any houses should score much lower\n\n**Quality Checks:**\n1. Verify all results are type=\"apartment\"\n2. Check for balcony feature in high-scoring properties\n3. Confirm no houses in top results"
					},
					"response": []
				},
				{
					"name": "üíé Price Range Compliance",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"house under 3 million rand\",\n    \"limit\": 8\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/search/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", ""]
						},
						"description": "**Price Range Compliance Test - +15% Budget Bonus**\n\nüíé **Test Goal:** Verify price filter extraction and bonus application\n\n**AI Price Intelligence:**\n- \"under 3 million rand\" ‚Üí max_price = 3,000,000\n- Properties ‚â§ R3M should get +15% bonus\n- Properties ‚â§ R3.6M (20% over) should get +8% bonus\n- Properties > R3.6M should get no price bonus\n\n**Expected Results:**\n- All properties should be under R3.6M\n- Cheapest properties (well under budget) score highest\n- Properties near R3M score moderately\n- No properties over R3.6M in results\n\n**Score Pattern:**\n- R1-2M properties: 85-95% (excellent value)\n- R2.5-3M properties: 80-90% (within budget)\n- R3-3.6M properties: 75-85% (acceptable)"
					},
					"response": []
				},
				{
					"name": "üîÑ Unique Score Verification",
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"query\": \"property in Cape Town\",\n    \"limit\": 15\n}"
						},
						"url": {
							"raw": "{{base_url}}/api/v1/search/",
							"host": ["{{base_url}}"],
							"path": ["api", "v1", "search", ""]
						},
						"description": "**Unique Score Verification - No Duplicates**\n\nüîÑ **Test Goal:** Confirm every property gets a unique decimal score\n\n**Uniqueness Features:**\n- Each property gets consistent random factor (0.01-0.99)\n- Decimal precision to 1 place (e.g., 87.3%)\n- Deterministic per property (same property = same score)\n- No two properties should have identical scores\n\n**Verification Checklist:**\n1. ‚úÖ All scores are unique (no duplicates)\n2. ‚úÖ Scores have 1 decimal place\n3. ‚úÖ Scores range appropriately (not all similar)\n4. ‚úÖ Running same query gives consistent scores\n\n**Expected Pattern:**\n- 15 properties = 15 unique scores\n- Example: 78.3%, 76.7%, 74.1%, 72.8%, etc.\n- Proper ranking order maintained\n- Realistic score distribution"
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Set base URL if not already set",
					"if (!pm.collectionVariables.get(\"base_url\")) {",
					"    pm.collectionVariables.set(\"base_url\", \"http://localhost:8000\");",
					"}",
					"",
					"// Add timestamp for unique requests",
					"pm.collectionVariables.set(\"timestamp\", Date.now());"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					"// Basic response validation",
					"pm.test(\"Status code is successful\", function () {",
					"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);",
					"});",
					"",
					"pm.test(\"Response time is acceptable\", function () {",
					"    pm.expect(pm.response.responseTime).to.be.below(15000);",
					"});",
					"",
					"pm.test(\"Response has JSON content\", function () {",
					"    pm.expect(pm.response.headers.get(\"Content-Type\")).to.include(\"application/json\");",
					"});",
					"",
					"// Search-specific tests",
					"if (pm.request.url.path.includes('search') && pm.request.method === 'POST') {",
					"    pm.test(\"Search response has properties\", function () {",
					"        const jsonData = pm.response.json();",
					"        pm.expect(jsonData).to.have.property('properties');",
					"        pm.expect(jsonData.properties).to.be.an('array');",
					"    });",
					"    ",
					"    pm.test(\"Search scores are realistic percentages\", function () {",
					"        const jsonData = pm.response.json();",
					"        if (jsonData.properties && jsonData.properties.length > 0) {",
					"            jsonData.properties.forEach(property => {",
					"                if (property.searchScore) {",
					"                    pm.expect(property.searchScore).to.be.at.least(15);",
					"                    pm.expect(property.searchScore).to.be.at.most(100);",
					"                }",
					"            });",
					"        }",
					"    });",
					"    ",
					"    pm.test(\"Search scores are unique (no duplicates)\", function () {",
					"        const jsonData = pm.response.json();",
					"        if (jsonData.properties && jsonData.properties.length > 1) {",
					"            const scores = jsonData.properties.map(p => p.searchScore).filter(s => s);",
					"            const uniqueScores = [...new Set(scores)];",
					"            pm.expect(scores.length).to.equal(uniqueScores.length, 'All scores should be unique');",
					"        }",
					"    });",
					"}"
				]
			}
		}
	],
	"variable": [
		{
			"key": "base_url",
			"value": "http://localhost:8000",
			"type": "string"
		}
	]
} 